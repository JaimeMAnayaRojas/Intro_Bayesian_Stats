pi
2*pi
# some math operations
# boolian statments
TRUE
x <- 10
7 <= 10
7 < 10
7 ==10
seq(from=1, to= 10, by = 1)
54*78
8754/541
455+862
1:1000
sequence(from=1, to =1000, by=1)
sequence(from= 1, to=100)
seq(from=1, to= 1000, by=1)
?seq
seq(0,1, length.out=11)
seq(from=1, to=1000, by=1)
seq(1, length.out=1000)
seq(from=3*5, to = 45*78, length.out=10)
seq(from=3*5, to = 45*78, by=100)
# This is  my frirst script March 28 2021
seq(from=1, to=10, by=0.5) # this produces a sequence of numbers from 1 to 10, by 0.5 intervals
# This is  my frirst script March 28 2021
seq(from=1, to=10, by=0.5) # this produces a sequence of numbers from 1 to 10, by 0.5 intervals
# This is  my frirst script March 28 2021
seq(from=1 to=10, by=0.5) # this produces a sequence of numbers from 1 to 10, by 0.5 intervals
# This is  my frirst script March 28 2021
seq(from=1, to=10, by=0.5) # this produces a sequence of numbers from 1 to 10, by 0.5 intervals
x <- 250
x
x <- 250
x
# This is  my frirst script March 28 2021
seq(from=1, to=10, by=0.5) # this produces a sequence of numbers from 1 to 10, by 0.5 intervals
x <- 250
x
# This is  my frirst script March 28 2021
seq(from=1, to=10, by=0.5) # this produces a sequence of numbers from 1 to 10, by 0.5 intervals
x <- 250
x
# This is  my frirst script March 28 2021
seq(from=1, to=10, by=0.5) # this produces a sequence of numbers from 1 to 10, by 0.5 intervals
x <- 250
x
# This is  my frirst script March 28 2021
seq(from=1, to=10, by=0.5) # this produces a sequence of numbers from 1 to 10, by 0.5 intervals
x <- 250
x
# This is  my frirst script March 28 2021
seq(from=1, to=10, by=0.5) # this produces a sequence of numbers from 1 to 10, by 0.5 intervals
x <- 250
x
# This is  my frirst script March 28 2021
seq(from=1, to=10, by=0.5) # this produces a sequence of numbers from 1 to 10, by 0.5 intervals
x <- 250
x
# This is  my frirst script March 28 2021
seq(from=1, to=10, by=0.5) # this produces a sequence of numbers from 1 to 10, by 0.5 intervals
x <- 250
x
# This is  my frirst script March 28 2021
seq(from=1, to=10, by=0.5) # this produces a sequence of numbers from 1 to 10, by 0.5 intervals
x <- 250
x
#
y <- 350
x + y
log10(10) #
1 ^ 10
10^1
log10(2) #
10^2
log10(100) #
10^2
pi
sin(2*pin)
sin(2*pi)
10 < 7
10 == 10
10 != 7
rm(list = ls())
4+5 # addition
9-8 # subtraction
9*5 # multiplication
8248424/998278 # division
10^2 # power
log(10) # natural log
exp(log(10))
log10(100) # log 10
10^2 # inverse log10 10
pi
sin(2*pi)
10 < 7 # smaller than
10 > 7 # larger than
10 == 10 # equal than
10 != 7 # different than
1:100
seq(from=1, to= 100, by=1)
seq(from=1, to= 100, by=0.5)# sequence of from 1 to 100, by 1
seq(from=1, to= 100, length.out = 20)# sequence of from 1 to 100, output 20
?seq
seq()
seq(1,10, along.with=5)
seq(1,100, along.with=5)
seq(1,100, 20)
seq(1,100, length.out = 20) # by
x <- 25
y <- 10
x*y
x * 20
x * y + 20
vals_0_100 <- seq(from= 0, to= 100, by=1)
vals_0_100
vals_0_100 * 2
vals_0_100 + 10
vals_0_100 + 10 # add 10 to each value
vals_0_100 * x
vals_0_100 * vals_0_100
vals_0_100 * vals_0_100 == vals_0_100^2
vals_0_100 %*% vals_0_100
diag(vals_0_100)
vals_0_5 <- seq(from= 0, to= 5, by=1)
vals_0_5
vals_0_5 * 2 # multiple each value by 2
vals_0_5 + 10 # add 10 to each value
vals_0_5 * x
vals_0_5 * vals_0_5
vals_0_5 * vals_0_5 == vals_0_5^2
diag(vals_0_5)
install.packages("ggplot2")
library("ggplot2")
library("ggplot2")
library("ggplot2", "dplyr")
install.packages("ggplot2","dplyr")
install.packages("ggplot2", "dplyr")
library("dplyr")
x <- seq(1, 10, 0.5)
y <- x^2
plot(y ~ x)
plot(y ~ x, "l")
plot(y ~ x, type='l')
plot(y ~ x)
plot(y ~ x, type='l')
plot(y ~ x, type='l', xlab= "my x var", y='my Y var')
plot(y ~ x, type='l', xlab= "my x var", y='my Y var')
plot(y ~ x)
plot(y ~ x, type='l')
plot(y ~ x, type='l', xlab= "my x var", ylab='my Y var')
plot(sin(y) ~ x, type='l')
x <- seq(1, 10, 0.25)
y <- x^2
plot(y ~ x)
plot(y ~ x, type='l')
plot(y ~ x, type='l', xlab= "my x var", ylab='my Y var')
plot(sin(y) ~ x, type='l')
y2 <- sin(x)
plot(y2 ~ x, type='l')
qplot(x, y)
qplot(x, y, geom="line")
library("ggplot2")
library("dplyr")
qplot(x, y, geom="line")
qplot(x, y, geom="line")
# plots with ggplot2
qplot(x, y, geom="line")
y2 <- sin(x)
plot(y2 ~ x, type='l')
qplot(x, y2, geom="line")
citation()
4 + 5
1:100
5 - 6
5 * 9
5*9
5/9
10^2
log(10)
exp(2.302585)
pi
sin(2*pi)
seq(from = 1 , to=100, by = 1)
seq(from = 1 , to=100, length.out=20)
?seq
seq()
seq(0, 1, length.out = 11)
seq(1.575, 5.125, by = 0.05)
# clear R's memory to start fresh (empty the glass)
rm(list = ls())
# 2 + 3
2+3
# packages
install.packages("ggplot2")
library("ggplot2")
2 + 5
x <- 2 + 5
x * 5
x <- seq(from=1, to = 50, by =1 )
y <- sin(x)
plot(x,y)
plot(x, y, type = 'l')
plot(y~ x, type='l', col="red")
plot(y~ x, type='l', col="red", xlab= "my X", ylab = "my Y") # change color of line
qplot(x, y, geom = 'line')
?qplot
# Clear R's memory
rm(list=ls())
# Clear R's memory
rm(list=ls())
4 + 5 # this is an addition, we use the + symbol
9*5 # this is a multiplication, we use *
9 / 5 # we use / for division
10 < 7 # is 10 smaller than 7?
# This is my first R script.
# 29 March 2021
# Here, we are learning how to use R.
# install.packages("ggplot2") # installing one package
# install.packages(c("ggplot2", "dplyr", "data.table")) # installing multiple packages
library("ggplot2")
library("dplyr")
# Clear R's memory
rm(list=ls())
# 1. basic math operations
4 + 5 # this is an addition, we use the + symbol
9*5 # this is a multiplication, we use *
9 / 5 # we use / for division
10 < 7 # is 10 smaller than 7?
getwd()
post <- read.csv("Desktop/post.csv")
str(post)
pred_func <- function(post, R, SR, A, uniA, REALM,  out = "stability"){
if(out = "stability"){
R1 <-  with(post, b_stability_Intercept + b_stability_R * R + b_stability_VR*VR + b_stability_SR*SR +
b_stability_A* A + b_stability_uniA*uniA + b_stability_REALMTerrestrial* REALM +
b_stability_R.REALMTerrestrial * REALM*R + b_stability_VR.REALMTerrestrial * REALM*VR +
b_stability_A.REALMTerrestrial * REALM*A + b_stability_uniA.REALMTerrestria * REALM*uniA)
}
}
pred_func <- function(post, R, SR, A, uniA, REALM,  out = "stability"){
if(out = "stability"){
R1 <-  with(post, b_stability_Intercept + b_stability_R * R + b_stability_VR*VR + b_stability_SR*SR +
b_stability_A* A + b_stability_uniA*uniA + b_stability_REALMTerrestrial* REALM +
b_stability_R.REALMTerrestrial * REALM*R + b_stability_VR.REALMTerrestrial * REALM*VR +
b_stability_A.REALMTerrestrial * REALM*A + b_stability_uniA.REALMTerrestria * REALM*uniA)
}
}
pred_func <- function(post, R, SR, A, uniA, REALM,  out = "stability"){
if(out = "stability"){
R1 <-  with(post, b_stability_Intercept + b_stability_R * R + b_stability_VR*VR + b_stability_SR*SR +
b_stability_A* A + b_stability_uniA*uniA + b_stability_REALMTerrestrial* REALM +
b_stability_R.REALMTerrestrial * REALM*R + b_stability_VR.REALMTerrestrial * REALM*VR +
b_stability_A.REALMTerrestrial * REALM*A + b_stability_uniA.REALMTerrestria * REALM*uniA)
}
}
pred_func <- function(post, R, SR, A, uniA, REALM,  out = "stability"){
if(out == "stability"){
R1 <-  with(post, b_stability_Intercept + b_stability_R * R + b_stability_VR*VR + b_stability_SR*SR +
b_stability_A* A + b_stability_uniA*uniA + b_stability_REALMTerrestrial* REALM +
b_stability_R.REALMTerrestrial * REALM*R + b_stability_VR.REALMTerrestrial * REALM*VR +
b_stability_A.REALMTerrestrial * REALM*A + b_stability_uniA.REALMTerrestria * REALM*uniA)
}
}
Aquatic_pred = pred_func(post = post, R = 5, SR = 0.5, A = 1.2, uniA = 0.5, REALM = 0  )
pred_func <- function(post, R, SR, A, uniA, VR, REALM,  out = "stability"){
if(out == "stability"){
R1 <-  with(post, b_stability_Intercept + b_stability_R * R + b_stability_VR*VR + b_stability_SR*SR +
b_stability_A* A + b_stability_uniA*uniA + b_stability_REALMTerrestrial* REALM +
b_stability_R.REALMTerrestrial * REALM*R + b_stability_VR.REALMTerrestrial * REALM*VR +
b_stability_A.REALMTerrestrial * REALM*A + b_stability_uniA.REALMTerrestria * REALM*uniA)
}
}
Aquatic_pred = pred_func(post = post, R = 5, SR = 0.5, A = 1.2, uniA = 0.5, VR = 0.5, REALM = 0  )
pred_func <- function(post, R, SR, A, uniA, VR, REALM,  out = "stability"){
if(out == "stability"){
R1 <-  with(post, b_stability_Intercept + b_stability_R * R + b_stability_VR*VR + b_stability_SR*SR +
b_stability_A* A + b_stability_uniA*uniA + b_stability_REALMTerrestrial* REALM +
b_stability_R.REALMTerrestrial * REALM*R + b_stability_VR.REALMTerrestrial * REALM*VR +
b_stability_A.REALMTerrestrial * REALM*A + b_stability_uniA.REALMTerrestrial * REALM*uniA)
}
}
Aquatic_pred = pred_func(post = post, R = 5, SR = 0.5, A = 1.2, uniA = 0.5, VR = 0.5, REALM = 0  )
mean(Aquatic_pred)
library(rethinking)
HPDI(Aquatic_pred)
mean(Aquatic_pred)
HPDI(Aquatic_pred)
HPDI(Aquatic_pred, prob = .95)
Terrestrial_pred = pred_func(post = post, R = 5, SR = 0.5, A = 1.2, uniA = 0.5, VR = 0.5, REALM = 1  )
newR = 1:200
new.pred = sapply(1:length(newR), function(i) pred_func(post = post, R = newR[i], SR = 0.5, A = 1.2,
uniA = 0.5, VR = 0.5, REALM = 1  ))
T.pred = sapply(1:length(newR), function(i) pred_func(post = post, R = newR[i], SR = 0.5, A = 1.2,
uniA = 0.5, VR = 0.5, REALM = 1  ))
A.pred = sapply(1:length(newR), function(i) pred_func(post = post, R = newR[i], SR = 0.5, A = 1.2,
uniA = 0.5, VR = 0.5, REALM = 0  ))
dim(T.pred)
meanT = apply(T.pred, 2, mean)
ciT = apply(T.pred, 2, HPDI, prob= .95)
plot(meanT ~ newR)
plot(meanT ~ newR, pch="")
lines(meanT ~ newR, col='red')
shades(newR, ciT, col=alpha("red", 2))
shade(newR, ciT, col=alpha("red", 2))
shade(ciT,newR col=alpha("red", 2))
shade(ciT,newR, col=alpha("red", 2))
lines(meanT ~ newR, col='red')
plot(meanT ~ newR, pch="")
lines(meanT ~ newR, col='red')
shade(ciT,newR, col=alpha("red", 0.2))
meanA = apply(A.pred, 2, mean)
ciA = apply(A.pred, 2, HPDI, prob= .95)
plot(meanT ~ newR, pch="")
lines(meanT ~ newR, col='red')
shade(ciT,newR, col=alpha("red", 0.2))
lines(meanA ~ newR, col='blue')
shade(ciA,newR, col=alpha("blue", 0.2))
plot(meanT ~ newR, pch="", ylim = c(0,5))
lines(meanT ~ newR, col='red')
shade(ciT,newR, col=alpha("red", 0.2))
lines(meanA ~ newR, col='blue')
shade(ciA,newR, col=alpha("blue", 0.2))
length(which(T.pred - A.pred > 0))/length(T.pred)
newR = seq(from=0, to=5, by =0.01)
T.pred = sapply(1:length(newR), function(i) pred_func(post = post, R = newR[i], SR = 0, A = 0,
uniA = 0, VR = 0, REALM = 1  ))
dim(T.pred)
meanT = apply(T.pred, 2, mean)
ciT = apply(T.pred, 2, HPDI, prob= .95)
A.pred = sapply(1:length(newR), function(i) pred_func(post = post, R = newR[i], SR = 0.5, A = 1.2,
uniA = 0.5, VR = 0.5, REALM = 0  ))
meanA = apply(A.pred, 2, mean)
ciA = apply(A.pred, 2, HPDI, prob= .95)
plot(meanT ~ newR, pch="", ylim = c(0,5))
lines(meanT ~ newR, col='red')
shade(ciT,newR, col=alpha("red", 0.2))
compensation <- read.csv("~/Dropbox/Projects_JM/Muenster/Intro_Bayesian_Stats/Getting_started/datasets-master/compensation.csv")
View(compensation)
compensation <- read.csv("~/Dropbox/Projects_JM/Muenster/Intro_Bayesian_Stats/Getting_started/datasets-master/compensation.csv")
View(compensation)
# This is my first R script.
# 15 April 2021
# Here, we are learning how to get data into R.
# install.packages("ggplot2")
library("ggplot2")
library("dplyr")
# Clear R's memory
rm(list=ls())
compensation <- read.csv("~/Dropbox/Projects_JM/Muenster/Intro_Bayesian_Stats/Getting_started/datasets-master/compensation.csv")
dataSummer <- read.csv("~/Dropbox/Projects_JM/Muenster/Intro_Bayesian_Stats/Getting_started/datasets-master/compensation.csv")
dataWinter <- read.csv("~/Dropbox/Projects_JM/Muenster/Intro_Bayesian_Stats/Getting_started/datasets-master/compensation.csv")
# This is my first R script.
# 15 April 2021
# Here, we are learning how to get data into R.
# install.packages("ggplot2")
library("ggplot2")
library("dplyr")
# Clear R's memory
rm(list=ls())
data <- read.csv("~/Dropbox/Projects_JM/Muenster/Intro_Bayesian_Stats/Getting_started/datasets-master/compensation.csv")
getwd()
sewd("~/Dropbox/Projects_JM/Muenster/Intro_Bayesian_Stats/Getting_started/")
setwd("~/Dropbox/Projects_JM/Muenster/Intro_Bayesian_Stats/Getting_started/")
getwd()
